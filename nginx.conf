server {
    # Nginx سيستمع على المنفذ 80، وهو المنفذ القياسي لبروتوكول HTTP.
    listen 80;
    # اسم الخادم الافتراضي داخل الحاوية.
    server_name localhost;

    # هذا البلوك يتعامل مع جميع الطلبات الواردة (/).
    location / {
        # يحدد Nginx أن الملفات التي سيخدمها موجودة في هذا المسار.
        # هذا هو المكان الذي نسخنا إليه ملفات Flutter المبنية.
        root   /usr/share/nginx/html;
        # يحدد الملفات التي يجب أن يبحث عنها Nginx افتراضيًا عند طلب مجلد (مثل عند الوصول إلى الجذر `/`).
        index  index.html index.htm;
        
        # هذا السطر هو الأهم لتطبيقات Flutter Web (أو أي تطبيق Single-Page Application - SPA).
        # ماذا يعني `try_files $uri $uri/ /index.html;`؟
        # 1. `$uri`: حاول البحث عن الملف المطلوب بالضبط في المسار (مثل /about/image.png).
        # 2. `$uri/`: إذا لم تجده كملف، حاول البحث عنه كمجلد (مثل /assets/).
        # 3. `/index.html`: إذا لم تجد أي شيء في الخطوتين السابقتين، قم بإرجاع ملف index.html.
        # لماذا هذا مهم لـ Flutter؟ لأن Flutter يتعامل مع "التوجيه" (Routing) من جانب العميل باستخدام JavaScript.
        # عندما يزور المستخدم مسارًا مثل `yourdomain.com/settings`، فإن المتصفح يحاول طلب ملف اسمه `settings` من الخادم.
        # لكن هذا الملف غير موجود فعليًا على الخادم (الموجود هو `index.html` فقط).
        # هذا السطر يضمن أن Nginx يعيد دائمًا `index.html`، ثم يتولى كود Flutter JavaScript داخل `index.html` مسؤولية عرض صفحة "settings" الصحيحة داخل التطبيق.
        try_files $uri $uri/ /index.html;
    }

    # التعامل مع صفحات الأخطاء (مثل 500 Server Error).
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}